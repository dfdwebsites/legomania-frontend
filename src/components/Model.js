/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useLoader, useThree } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';
import { TextureLoader } from 'three';
import gsap from 'gsap';

const color = new THREE.Color();

export default function Model(props) {
  const { nodes } = useLoader(GLTFLoader, '/legoModel.glb', (loader) => {
    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('/draco/');
    dracoLoader.setDecoderConfig({ type: 'js' });
    loader.setDRACOLoader(dracoLoader);
  });

  // const torso = result.scene.children.find((child) => child.name === 'torso');
  const [
    torsoTexture,
    faceTexture,
    waisteTexture,
    leftFootTexture,
    rightFootTexture
  ] = useLoader(TextureLoader, [
    '/images/textures/torso.jpg',
    '/images/textures/face.png',
    '/images/textures/waist.png',
    '/images/textures/leftFoot.png',
    '/images/textures/rightFoot.png'
  ]);

  const textures = [
    torsoTexture,
    faceTexture,
    waisteTexture,
    leftFootTexture,
    rightFootTexture
  ];
  textures.map((texture) => {
    texture.flipY = false;
    texture.encoding = THREE.sRGBEncoding;
    texture.needsUpdate = true;
  });

  const torsoMaterial = new THREE.MeshStandardMaterial({
    map: torsoTexture,
    color: '#ffffff'
  });
  const waisteMaterial = new THREE.MeshStandardMaterial({
    map: waisteTexture,
    color: '#ffffff'
  });
  const leftFootMaterial = new THREE.MeshStandardMaterial({
    map: leftFootTexture,
    color: '#ffffff'
  });
  const rightFootMaterial = new THREE.MeshStandardMaterial({
    map: rightFootTexture,
    color: '#ffffff'
  });
  const faceMaterial = new THREE.MeshStandardMaterial({
    map: faceTexture,
    color: '#ffffff'
  });
  const handsMaterial = new THREE.MeshStandardMaterial({
    color: '#FFDB00'
  });
  const hatMaterial = new THREE.MeshStandardMaterial({
    color: '#ff0000'
  });
  const hatAccessMaterial = new THREE.MeshStandardMaterial({
    color: '#000000'
  });
  // console.log(torso);
  // console.log(result);
  const group = useRef();
  // const { nodes, materials } = useGLTF('/legoModel.glb');
  //   const { actions } = useAnimations(animations, group);
  //   const [hovered, set] = useState();
  // console.log(nodes);

  // const [scrollPos, setScrollPos] = useState(0);

  useEffect(() => {
    document.addEventListener('scroll', () => animationChanged(window.scrollY));

    return () => {
      document.removeEventListener('scroll', () =>
        animationChanged(window.scrollY)
      );
    };
  }, [window.scrollY]);

  // useEffect(() => {
  // if (scrollPos > 600) {
  //   group.current.children[0].rotation.y = Math.PI;
  //   group.current.children[1].rotation.y = Math.PI;
  // } else {
  //   group.current.children[1].rotation.y = 0;
  //   group.current.children[0].rotation.y = 0;
  // }
  // // group.current.position.y = 1 + scrollPos / 500;
  // // if (group.current.position.y > 0) {
  // //   group.current.position.y = 0;
  // // }

  // group.current.position.z = Math.max(-scrollPos / 10, -50);
  //   animationChanged(scrollPos);
  // }, [scrollPos]);

  const animationChanged = (num) => {
    if (group && group.current && group.current.children) {
      if (num > 1000) {
        gsap.set(group.current.children[0].rotation, {
          y: Math.PI
        });
        gsap.to(group.current.children[1].rotation, {
          y: Math.PI,
          duration: 0.7,
          ease: 'power1.inOut'
        });
      } else {
        gsap.set(group.current.children[0].rotation, {
          y: 0
        });
        gsap.to(group.current.children[1].rotation, {
          y: 0,
          duration: 0.5,
          ease: 'power1.inOut'
        });
      }
      gsap.to(group.current.position, {
        z: Math.max(-num / 10, -50),
        duration: 0.5,
        ease: 'power1.inOut'
      });
    }
  };
  //   useEffect(() => void (actions['CameraAction.005'].play().paused = true), []);
  //   useEffect(() => {
  //     if (hovered)
  //       group.current.getObjectByName(hovered).material.color.set('white');
  //     document.body.style.cursor = hovered ? 'pointer' : 'auto';
  //   }, [hovered]);
  useFrame((state) => {
    // group.current.children[0].children.forEach((child, index) => {
    // child.material.color.lerp(
    //   color
    //     .set(hovered === child.name ? 'tomato' : '#202020')
    //     .convertSRGBToLinear(),
    //   hovered ? 0.1 : 0.05
    // );

    // console.log(group.current);
    // console.log(state);
    // console.log(state);
    const et = state.clock.elapsedTime;
    // child.position.y = Math.sin((et + index * 2000) / 2) * 1;
    // child.rotation.x = Math.sin((et + index * 2000) / 3) / 10;
    // child.rotation.y = Math.cos((et + index * 2000) / 2) / 10;
    // group.current.children[7].rotation.y = et * 2;
    // group.current.children[7].rotation.z += et * 0.000003;
    // group.current.rotation.y = et * 1;
  });
  // });

  return (
    <group ref={group} {...props} position-y={-0.5}>
      <mesh
        name="Torso"
        geometry={nodes.torso.geometry}
        material={torsoMaterial}
        // position={[0, -15, 0]}
        // rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        name="Head"
        geometry={nodes.head.geometry}
        material={faceMaterial}
        position={[0, 1.8, 0]}
        // rotation={[Math.PI / 2, 0, 0]}
        // {...extras}
      />
      <mesh
        name="Hands"
        geometry={nodes.hands.geometry}
        material={handsMaterial}
        position={[-0.87, 1.35, 0]}
        rotation={[0, 0, 0]}
      />
      <mesh
        name="waist"
        geometry={nodes.waist.geometry}
        material={waisteMaterial}
        // position={[-0.87, 1.45, 0]}
        // rotation={[0, 0, 0]}
      />
      <mesh
        name="leftFoot"
        geometry={nodes.leftFoot.geometry}
        material={rightFootMaterial}
        position={[-0.57, -0.5, 0]}
        // rotation={[0, 0, 0]}
      />
      <mesh
        name="rightFoot"
        geometry={nodes.rightFoot.geometry}
        material={leftFootMaterial}
        position={[0.57, -0.5, 0]}
        // rotation={[0, Math.PI, 0]}
      />
      <mesh
        name="hat"
        geometry={nodes.hat.geometry}
        material={hatMaterial}
        position={[0, 3.1, 0]}
        // rotation={[0, Math.PI, 0]}
      />
      <mesh
        name="hatAccessory"
        geometry={nodes.hatAccessory.geometry}
        material={hatAccessMaterial}
        position={[0, 3.6, 0]}
        // rotation={[0, Math.PI, 0]}
      />
    </group>
  );
}

useGLTF.preload('/legoModel.glb');
